<?php
/***************************************************************
*  Copyright notice
*
*  (c) 	2010 Lina Wolf (2010@lotypo3.de)
*  All rights reserved
*
*  This script is part of the TYPO3 project. The TYPO3 project is
*  free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
*
*  The GNU General Public License can be found at
*  http://www.gnu.org/copyleft/gpl.html.
*
*  This script is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  This copyright notice MUST APPEAR in all copies of the script!
***************************************************************/
/**
 * Plugin 'calendar' for the 'TIMTAB' extension.
 * Most code shamlesly taken from wordpress ;-)
 *
 * $Id$
 *
 * @author Lina Wold <2010@lotypo3.de>
 * Code based on Code of Ingo Renner from timtab v. 0.5, pi3
 */


require_once(PATH_tslib.'class.tslib_pibase.php');

class tx_timtab_calendar extends tslib_pibase {
	var $prefixId = 'tx_timtab_pi3';		// Same as class name
	var $scriptRelPath = 'widgets/calendar/class.tx_timtab_calendar.php';	// Path to this script relative to the extension dir.
	var $extKey = 'timtab';	// The extension key.
	var $enableFields;
	var $pi_checkCHash = TRUE;
	var $widgetType = 'calendar';
	var $temp_cObj = null;
	var $unixThisMonth = 0;
	var $unixNextMonth = 0;
	var $unixPrevMonth = 0;
	var $weekArray = array();
	var $confWidget = array();
	var $weekBegins = 0;
	


	/**
	 * render funtction for calendar
	 *
	 * @param	$params array	of parameters
	 * @param	$pObj string	name of pObj
	 * @return	string	complete content generated by the calendar widget
	 */
	function render($params, $pObj)	{
		if($params['widgetType'] != $this->widgetType)
			return $params['content'];
		$this->cObj =  $params['pObj']->cObj;
		$conf = $params['conf'];	
		$this->init($conf, $params['pidList']);
		$this->prepareMonth($params['ajaxStartDate']);
		
		$additionalHeader = $this->renderCalenderHeader();
		$GLOBALS['TSFE']->additionalHeaderData[] = $additionalHeader;
		
		$renderCalendarDaysOfWeek = $this->renderCalendarDaysOfWeek();
		$renderCalendarMonth =$this->renderCalendarMonth();
		// Since we share one cObject all recursive calls need to be made above this point
		$this->temp_cObj->data = array();
		$this->temp_cObj->data['currentYear'] = date('Y', $this->unixThisMonth);
		$this->temp_cObj->data['currentMonth'] = date ('F', $this->unixThisMonth);
		$this->temp_cObj->data['unixPrevMonth'] = $this->unixPrevMonth;
		$this->temp_cObj->data['unixPrevMonthEnd'] = $this->addOneMonth($this->unixPrevMonth);
		$this->temp_cObj->data['unixNextMonth'] = $this->unixNextMonth;
		$this->temp_cObj->data['unixNextMonthEnd'] = $this->addOneMonth($this->unixNextMonth);
		$this->temp_cObj->data['renderCalendarDaysOfWeek'] = $renderCalendarDaysOfWeek;
		$this->temp_cObj->data['renderCalendarMonth'] = $renderCalendarMonth;
		$content = $this->temp_cObj->cObjGetSingle($this->confWidget['renderCalendar'], $this->confWidget['renderCalendar.']);
		return $content;
	}
	
	function renderCalenderHeader() {
		$content = $this->temp_cObj->cObjGetSingle($this->confWidget['renderCalenderHeader'], $this->confWidget['renderCalenderHeader.']);
		return $content;
	}
	
	/**
	* Renders a month in the calendar
	* @param $month array of weeks
	* @return rendered calendar month
	*/
	function renderCalendarMonth() {

		$renderCalendarWeek = '';
		$i = 0;
		foreach($this->weekArray AS $weekOfYear => $week){	
			$renderCalendarWeek .= $this->renderCalendarWeek(++$i,$weekOfYear, $week);
		}
		$this->temp_cObj->data = array();
		$this->temp_cObj->data['renderCalendarWeek'] = $renderCalendarWeek;
		$content = $this->temp_cObj->cObjGetSingle($this->confWidget['renderCalendarMonth'], $this->confWidget['renderCalendarMonth.']);
		return $content;
	}
	
	/**
	* Renders a week in the calendar
	* @param $weekOfMonth int how maniest week of the month
	* @param $weekOfYear int how maniest week of the year (Kalenderwoche)
	* @param $week array of days in the week
	* @return rendered calendar week
	*/
	function renderCalendarWeek($weekOfMonth,$weekOfYear, $week) {
		$renderCalendarDay = '';
		foreach($week AS $day => $dayData){	
			$renderCalendarDay .= $this->renderCalendarDay($day, $dayData);
		}
		$this->temp_cObj->data = array();
		$this->temp_cObj->data['weekOfYear'] = $weekOfYear;
		$this->temp_cObj->data['weekOfMonth'] = $weekOfMonth;
		if($weekOfMonth == 1 && count($week) < 7){
			$this->temp_cObj->data['spaceBeforeDays'] = 7-count($week);
		} elseif(count($week) < 7) {
			$this->temp_cObj->data['spaceAfterDays'] = 7-count($week);
		}
		$this->temp_cObj->data['renderCalendarDay'] = $renderCalendarDay;
		$content = $this->temp_cObj->cObjGetSingle($this->confWidget['renderCalendarWeek'], $this->confWidget['renderCalendarWeek.']);
		return $content;
	}
	
	/**
	* Renders the one day in the calendar
	* @param $day int the day
	* @param $dayData array data of the day
	* @return rendered calendar day
	*/
	function renderCalendarDay($day, $dayData) {
		$renderCalenderPosts = ''; 
		if(is_array($dayData['posts'])) {
			foreach($dayData['posts'] AS $post){	
				$renderCalenderPosts .= $this->renderCalenderPosts($day, $dayData, $post);
			}
		}
		$this->temp_cObj->data = array();
		$this->temp_cObj->data['day'] = $day;
		$this->temp_cObj->data['startUnixTime'] = $dayData['unixTime'];
		$this->temp_cObj->data['endUnixTime'] = $dayData['unixTime']+24*3600;
		$this->temp_cObj->data['dayOfWeek'] = $dayData['dayOfWeek'];
		$this->temp_cObj->data['renderCalenderPosts'] = $renderCalenderPosts; 
		$this->temp_cObj->data['hasDayPosts'] = count($dayData['posts']) > 0;
		$content = $this->temp_cObj->cObjGetSingle($this->confWidget['renderCalendarDay'], $this->confWidget['renderCalendarDay.']);
		return $content;
	}
	
	/**
	* Renders the posts for one day
	* @param $day int the day
	* @param $dayData array data of the day
	* @param $post array selected row for the post
	* @return rendered post days
	*/
	function renderCalenderPosts($day, $dayData, $post) {
		$this->temp_cObj->data = array();
		$this->temp_cObj->data = $post;
		$content = $this->temp_cObj->cObjGetSingle($this->confWidget['renderCalenderPosts'], $this->confWidget['renderCalenderPosts.']);
		return $content;
	}
	
	/**
	* Renders the names of the days of the week from monday to sunday (or from first to last day of the week)
	* @return rendered days of the week
	*/
	function renderCalendarDaysOfWeek() {
		$weekDay = array(
			$this->pi_getLL('sunday'),
			$this->pi_getLL('monday'),
			$this->pi_getLL('tuesday'),
			$this->pi_getLL('wednesday'),
			$this->pi_getLL('thursday'),
			$this->pi_getLL('friday'),
			$this->pi_getLL('saturday')
		);
		$week = array();
		for($i = 0; $i <= 6; $i++) {
    	$week[] = $weekDay[($i + $this->weekBegins) % 7];
    }

		$content = '';
		foreach($week AS $dayOfWeek){	
			$this->temp_cObj->data = array();
			$this->temp_cObj->data['dayOfWeek'] = $dayOfWeek;
			$content .= $this->temp_cObj->cObjGetSingle($this->confWidget['renderCalendarDaysOfWeek'], $this->confWidget['renderCalendarDaysOfWeek.']);
		}
		return $content;
	}
	

	/**
	 * initializes the configuration for this plugin
	 *
	 * @param	array		configuration array
	 * @return	void
	 */
	function init($conf, $pidList) {
		$this->conf = array_merge($this->conf, $conf);
		$this->conf['allowCaching'] = $GLOBALS['TSFE']->tmpl->setup['plugin.']['tt_news.']['allowCaching'];
		$this->conf['singlePid'] = $GLOBALS['TSFE']->tmpl->setup['plugin.']['tx_timtab.']['singlePid'];
		$this->pi_setPiVarDefaults();
		$this->pi_loadLL();

		$this->conf['pidList'] = $pidList;
		$this->confWidget = $conf['widgets.']['calendar.'];
		
		if(!$this->cObj)
			$this->cObj = t3lib_div::makeInstance('tslib_cObj');
		
		
		$this->enableFields = $this->cObj->enableFields('tt_news')
			.' AND tt_news.type = 3';
		if($this->conf['pidList'])
			$this->enableFields .= ' AND tt_news.pid IN('.$this->conf['pidList'].')';
		$this->temp_cObj = t3lib_div::makeInstance('tslib_cObj');
		$this->weekBegins = $this->confWidget['conf.']['weekBegins'];
		
	}
	
	/**
	* prepares data of the month
	* the first day of the month will be stored in $this->unixThisMonth as unix date
	* the weeks of the month will be stored in $this->weekArray, an aray of weeks beeing an array of saysthe days
	* @return void
	*/
	function prepareMonth($ajaxStartDate) {
		// Let's figure out what month should be displayed
		$newsGET = t3lib_div::_GET('tx_ttnews');	
		if($ajaxStartDate) {
			$this->unixThisMonth = $ajaxStartDate;
		} elseif($newsGET['month'] && $newsGET['year']) {
			$this->unixThisMonth = mktime(0, 0 , 0, $newsGET['month'], 1, $newsGET['year']);
		} elseif($newsGET['pS']) {
			$this->unixThisMonth = intval($newsGET['pS']);
		} else {
			$this->unixThisMonth = $this->getCurrentTime() + $this->conf['gmt_offset'] * 3600;
		}
		// unixThisMonth has to point to the first day of the month
		$this->unixThisMonth =  mktime(0, 0, 0, date('m', $this->unixThisMonth), 1, date('Y', $this->unixThisMonth));

		$this->weekArray = $this->prepareDays($this->unixThisMonth);
		
		$this->unixNextMonth = 0;
		$this->unixPrevMonth = 0;
		// Get the next and previous month and year with at least one post
		$prev = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows(
			'datetime',
			'tt_news',
			'datetime < \''.$this->unixThisMonth.'\''.$this->enableFields,
			'',
			'datetime DESC',
			1
		);
		if(!empty($prev)) {
			$this->unixPrevMonth =  mktime(0, 0, 0, date('m', $prev[0]['datetime']), 1, date('Y', $prev[0]['datetime']));
		}

		$tomorrow = $this->addOneMonth($this->unixThisMonth);
		$next = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows(
			'title,datetime',
			'tt_news',
			'datetime > \''.$tomorrow.'\''.$this->enableFields,
			'',
			'datetime ASC',
			1
		);
		if(!empty($next)) {
			$this->unixNextMonth = mktime(0, 0, 0, date('m', $next[0]['datetime']), 1, date('Y', $next[0]['datetime']));
		}
		
	}
	
	/*
	* Prepares weeks and days for output in the calendar
	* @param $thisMonth int month to be displayed (1..12)
	* @param $year int to be displayed (unix time is beeing used, therefore 1970..2036)
	* @returns array of weeks containing array of days containing array of posts of the day if aplicable
	*/
	function prepareDays($unixThisMonth){
		$daysInMonth = intval(date('t', $unixThisMonth));
		$weekArray = array();
		$week = array();
		$daysWithPosts = $this->getDaysWithPosts($unixThisMonth);
		// Create all days of the month
		for ($day = 1; $day <= $daysInMonth; ++$day) {
			$unixTime = $unixThisMonth+($day-1)*24*3600;
			$week[$day] = array();
			$week[$day]['unixTime'] = $unixTime;
			$week[$day]['dayOfWeek'] = $this->dayOfWeek($unixTime);
			if($daysWithPosts[$day])
				$week[$day]['posts'] = $daysWithPosts[$day];
			if (6 == $week[$day]['dayOfWeek']) {
				// Start a new, empty week
				$weekArray[] = $week;
				$week = array();
			}
		}
		
		if($week)
			$weekArray[] = $week;
		return $weekArray;
	}
	
	/**
	 * find posts for the month
	 *
	 * @param	$monthBegin int the first day of the month in unix time
	 * @return array of days (by number of day in month) containing an array of posts for that day only returns days for withch posts have been found
	 */
	function getDaysWithPosts($monthBegin) {
		//find all news of the month
		$daysInMonth = intval(date('t', $monthBegin));
		$monthEnd = $monthBegin + ($daysInMonth  * 24 * 3600);
		
		$where = 'datetime > '.$monthBegin.' AND datetime < '.$monthEnd.$this->enableFields;
		$result = $GLOBALS['TYPO3_DB']->exec_SELECTgetRows(
			'title, datetime',
			'tt_news',
			$where,
			'datetime ASC'
		);
		$daysWithPosts = array();
		foreach($result as $row) {
			$day = date('j', $row['datetime']);
			if(!$daysWithPosts[$day])
				$daysWithPosts[$day] = array();
			$daysWithPosts[$day][] = $row;
		}
		return $daysWithPosts;
	}
	
	/**
	 * gets the current time optionaly regarding GMT offset
	 *
	 * @param	boolean		get time without GMT offset when set to true
	 * @return	integer		the current timestamp
	 */
	function getCurrentTime($gmt = false) {
		if($gmt) {
			$time = time();
		} else {
			$time = time() + ($this->conf['gmt_offset'] * 3600);
		}

		return $time;
	}
	
	/**
	* Adds a month to the date provided
	* @param unixTime int the date in unix time
	* @return unixTime + 1 month
	*/
	function addOneMonth($unixTime) {
		$day = intval(date('d', $unixTime));
		$month = intval(date('n', $unixTime));
		$year = intval(date('Y', $unixTime));
		
		$month++;
		if($month > 12) {
			$month = 1;
			$year++;
		}
		return mktime(0, 0 , 0, $month, $day, $year);
	}
	

	/**
	 * Returns the number of the day of the week with weekBegin minded
	 * if week starts with sunday, sunday would be 0, monday 1
	 * if week starts with monday, sunday is 6, monday 1
	 * etc
	 * Alogorithmn:
	 * calculates dayOfweek (in numbers 0=sunday, 1=monday etc) minus the number of the day where the week begins (0 for sunday, 1 for monday, ..)
	 * adds 7 to prevent negative results and takes the modulus to bring the result between 0 and 6 (by substrakting 7 if nessesary)
	 *
	 * @param	$unixTime integer	the day to be checked
	 * @return	integer	number of the day of the week (0..6)
	 */
	function dayOfWeek($unixTime) {
		return (date('w', $unixTime)-$this->weekBegins+7) % 7;
	}
}



if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/timtab/widgets/class.tx_timtab_calendar.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/timtab/widgets/class.tx_timtab_calendar.php']);
}

?>