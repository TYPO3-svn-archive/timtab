<?php
/***************************************************************
*  Copyright notice
*
*  (c) 2010 Lina Wolf (2010@lotypo3.de)
*  All rights reserved
*
*  This script is part of the TYPO3 project. The TYPO3 project is
*  free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
*
*  The GNU General Public License can be found at
*  http://www.gnu.org/copyleft/gpl.html.
*
*  This script is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  This copyright notice MUST APPEAR in all copies of the script!
***************************************************************/

require_once(PATH_tslib . 'class.tslib_pibase.php');


/**
 * Plugin 'widgets' for the 'TIMTAB' extension.
 *
 * @package TYPO3
 * @subpackage timtab
 * @author	Lina Wolf <2010@lotypo3.de>
 * @author	Timo Webler <timo.webler@dkd.de>
 * @version $Id$
 */
class tx_timtab_pi1 extends tslib_pibase {

	/**
	 * Same as class name
	 *
	 * @var string
	 */
	public $prefixId = 'tx_timtab_pi1';

	/**
	 * Path to this script relative to the extension dir.
	 *
	 * @var string
	 */
	public $scriptRelPath = 'pi1/class.tx_timtab_pi1.php';

	/**
	 * The extension key.
	 *
	 * @var string
	 */
	public $extKey = 'timtab';


	/**
	 * plugin configuration
	 *
	 * @var array
	 */
	public $conf = array();

	/**
	 * main function calling widgets
	 *
	 * @param	string	$content	plugin output is added to this
	 * @param	array	$conf	configuration array
	 * @return	string	complete content generated by the widget
	 */
	public function main($content, $conf) {
		$this->init($conf);
		$pluginData = array();
		if ($this->cObj->data['CType'] === 'list' && $this->cObj->data['list_type'] === 'timtab_pi1') {
			//Only use cObj->data when Code was called by a Plugin
			$pluginData = $this->cObj->data;
		}

		//Prepare Data
		$widgetType = $this->pi_getFFvalue($pluginData['pi_flexform'], 'widget');
		if (empty($widgetType)) {
			$widgetType = $conf['widgetType'];
		}
		$pidList = $pluginData['pages'] ? $pluginData['pages'] : $conf['pidList'];
		$recursive = $pluginData['recursive'] ? $pluginData['recursive'] : $conf['pidListRecursive'];
		$pidList = $this->pi_getPidList($pidList, $recursive);
		$content = '';
		// process hooks, intern widgets are also hooks for now
		$widgetConfiguration = $GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['timtab']['renderWidgets'][$widgetType];
		if (is_array($widgetConfiguration)) {

			$widget = t3lib_div::getUserObj($widgetConfiguration['class'], 'user_', TRUE);
			// check interface
			if ($widget instanceof tx_timtab_widget_Interface) {
				$content = $widget->render($conf, $pidList, $this);
			} else {
				$widgetType = 'empty';
			}
		}

		if ($content == '') {
			// If there was no PHP function prozess by TS
			$content = $this->cObj->cObjGetSingle(
				$conf['widgets.'][$widgetType . '.']['renderCObject'],
				$conf['widgets.'][$widgetType . '.']['renderCObject.']
			);
		}

		$content = $this->cObj->stdWrap($content, $conf['stdWrap.']);
		if (!$this->conf['disableBaseWrap']) {
			$content = $this->pi_wrapInBaseClass($content);
		}
		return $content;
	}

	/**
	 * initializes the configuration for this plugin
	 *
	 * @param array $conf configuration array
	 * @return void
	 */
	protected function init($conf) {
		$this->conf = $conf;
		$this->pi_setPiVarDefaults();
		$this->pi_loadLL();
		$this->pi_initPIflexForm('pi_flexform');
	}

}



if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/timtab/pi1/class.tx_timtab_pi1.php']) {
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/timtab/pi1/class.tx_timtab_pi1.php']);
}

?>