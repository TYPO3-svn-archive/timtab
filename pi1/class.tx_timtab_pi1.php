<?php
/***************************************************************
*  Copyright notice
*
*  (c) 2010 Lina Wolf (2010@lotypo3.de)
*  All rights reserved
*
*  This script is part of the TYPO3 project. The TYPO3 project is
*  free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
*
*  The GNU General Public License can be found at
*  http://www.gnu.org/copyleft/gpl.html.
*
*  This script is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  This copyright notice MUST APPEAR in all copies of the script!
***************************************************************/
/**
 * Plugin 'blogroll' for the 'TIMTAB' extension.
 *
 * $Id: class.tx_timtab_pi1.php 4157 2006-11-27 01:25:54Z flyguide $
 *
 * @author	Ingo Renner <typo3@ingo-renner.com>, Lina Wolf <2010@lotypo3.de>
 */
/**
 * [CLASS/FUNCTION INDEX of SCRIPT]
 *
 *
 *
 *   49: class tx_timtab_pi1 extends tslib_pibase
 *   63:     function main($content, $conf)
 *  110:     function init($conf)
 *  138:     function buildRelAttr($row)
 *
 * TOTAL FUNCTIONS: 3
 * (This index is automatically created/updated by the extension "extdeveval")
 *
 */


require_once(PATH_tslib.'class.tslib_pibase.php');

class tx_timtab_pi1 extends tslib_pibase {
	var $prefixId = 'tx_timtab_pi1';		// Same as class name
	var $scriptRelPath = 'pi1/class.tx_timtab_pi1.php';	// Path to this script relative to the extension dir.
	var $extKey = 'timtab';	// The extension key.
	var $enableFields;
	var $conf = array();
	var $temp_cObj = null;

	/**
	 * main funtction for blogroll
	 *
	 * @param	string		plugin output is added to this
	 * @param	array		configuration array
	 * @author Ingo Renner, Lina Wolf
	 * @return	string		complete content generated by the blogroll plugin
	 */
	function main($content, $conf)	{
		$this->init($conf);
		$widgetType = $conf['widgetType'];
		
		if($widgetType == 'blogroll') {
			$content = $this->renderBlogrollList();
		} elseif($widgetType == 'latestComments') {
			$content = $this->renderLatestCommentsList();
		}
		
		return $content;
	}
	
	function getPidList($pidList) {
		$pidList = trim($pidList);
		if($pidList == 'this') {
			$checkPid = ' AND pid ='.$GLOBALS['TSFE']->id;
		} elseif(!$pidList || $pidList == '*') {
			$checkPid = '';
		} elseif($pidList) {
			$pidArray = explode(',',$pidList);
			foreach($pidArray AS $key => $value) {
				$pidArray[$key] = intval($value);
			} 
			$pidArray = implode(',',$pidList);
			$checkPid = ' AND pid IN ('.$pidList.')';
		}
		return $checkPid;
	}
	
	
	
	
	function renderLatestCommentsItem($row) {
		$confWidget = $this->conf['widgets.']['latestComments.'];
		$content = '';
		$linkAnchor = $this->cObj->stdWrap( $confWidget['linkAnchor'], $confWidget['linkAnchor.']);
		
		$commentLinkAnchor = $this->cObj->wrap($row['uid'],$linkAnchor);
		$this->temp_cObj->data = $row;
		
		$this->temp_cObj->data['tt_news_uid'] = intval($row['external_ref']);
		$ttnews_uid = explode('_',$row['external_ref']);
		$ttnews_uid = $ttnews_uid[count($ttnews_uid)-1];
		$this->temp_cObj->data['renderedLink'] = $this->getSingleViewLink($ttnews_uid, $commentLinkAnchor );
		$content = $this->temp_cObj->cObjGetSingle($confWidget['renderLatestCommentsItem'], $confWidget['renderLatestCommentsItem.']);
		return $content;
	}
	
	
	
	
	
	function renderLatestCommentsList() {
		$content = '';
		$confWidget = $this->conf['widgets.']['latestComments.'];
		$checkPid = $this->getPidList($confWidget['pidList']);
		$max = $this->cObj->stdWrap( $confWidget['max'], $confWidget['max.']);
		$showTrackbacks = $this->cObj->stdWrap( $confWidget['showTrackbacks'], $confWidget['showTrackbacks.']);
		
		$trackbacksWhere = '';
		if(!$showTrackbacks) {
			$trackbacksWhere = ' AND tx_timtab_type != "trackback"';
		}
		$where = 'external_prefix="tx_ttnews" '.$this->cObj->enableFields('tx_comments_comments').' AND approved=1 '.$checkPid.$trackbacksWhere;
		$res = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
			'*',
			'tx_comments_comments',
			$where,
			'',
			'uid DESC',
			$max
		);
		$renderLatestCommentsItem = '';
		$count = 0;
		while ($row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res)) {
			$renderLatestCommentsItem .= $this->renderLatestCommentsItem($row);
			$count++;
		}
		
		$this->temp_cObj = t3lib_div::makeInstance('tslib_cObj');
		$this->temp_cObj->data = array();
		$this->temp_cObj->data['renderLatestCommentsItem'] = $renderLatestCommentsItem;
		$this->temp_cObj->data['count'] = $count;
		$content = $this->temp_cObj->cObjGetSingle($confWidget['renderLatestCommentsList'], $confWidget['renderLatestCommentsList.']);
		return $content;
	}
	
	/**
	* borrowed from tt_news
	*/
	function getSingleViewLink($uid, $section='', $urlOnly = false) {
		$conf = $GLOBALS['TSFE']->tmpl->setup['plugin.']['tt_news.'];
		$where = 'uid="'.intval($uid).'" '.$this->cObj->enableFields('tt_news').' ';
		$res = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
			'uid,datetime',
			'tt_news',
			$where
		);
		if ($row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res)) {
			$token = '|';
			$singlePid = $conf['singlePid'];
			$allowCaching = 1;
			$piVars = array();
			$piVars['year'] = date('Y', $row['datetime']);
			$piVars['month'] = date('m', $row['datetime']);
			
			
			$piVarsArray = array('backPid' => ($conf['dontUseBackPid'] ? null : $config['backPid']),
					'year' => ($conf['dontUseBackPid'] ? null : ($piVars['year'] ? $piVars['year'] : null)),
					'month' => ($conf['dontUseBackPid'] ? null : ($piVars['month'] ? $piVars['month'] : null)));
			
			if (! $conf['useHRDatesSingleWithoutDay']) {
				$piVars['day'] = date('d', $row['datetime']);
			}
			
			if ($conf['useHRDates']) {
				$piVarsArray['pS'] = null;
				$piVarsArray['pL'] = null;
				$piVarsArray['arc'] = null;
				if ($conf['useHRDatesSingle']) {
					$tmpY = $piVars['year'];
					$tmpM = $piVars['month'];
					$tmpD = $piVars['day'];
	
					$piVarsArray['year'] = $piVars['year'];
					$piVarsArray['month'] = $piVars['month'];
					$piVarsArray['day'] = ($piVars['day'] ? $piVars['day'] : null);
				}
			} else {
				$piVarsArray['year'] = null;
				$piVarsArray['month'] = null;
			}
	
			$piVarsArray['tt_news'] = $row['uid'];

			$additionalParams = '';
			foreach($piVarsArray AS $key => $value) {
				if (!is_null($value)){
					$additionalParams .= '&tx_ttnews['.$key.']='.$value;
				}
			}
			$params = array(
				'additionalParams' => $additionalParams,
				'no_cache' => $GLOBALS['TSFE']->no_cache,
				'parameter' => $singlePid,
				'useCacheHash' => !$GLOBALS['TSFE']->no_cache,
				'section' => $section
			);
			
			$linkWrap = $this->cObj->typolink($token, $params);
			$url = $this->cObj->lastTypoLinkUrl;
	
			// hook for processing of links
			if (is_array($GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['tt_news']['getSingleViewLinkHook'])) {
				foreach ($GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['tt_news']['getSingleViewLinkHook'] as $_classRef) {
					$_procObj = & t3lib_div::getUserObj($_classRef);
					$params = array('singlePid' => &$singlePid, 'row' => &$row, 'piVarsArray' => $piVarsArray);
					$_procObj->processSingleViewLink($linkWrap, $url, $params, $this);
				}
			}
	
			if ($conf['useHRDates'] && $conf['useHRDatesSingle']) {
				$piVars['year'] = $tmpY;
				$piVars['month'] = $tmpM;
				$piVars['day'] = $tmpD;
			}
	
			if ($urlOnly) {
				return $url;
			} else {
				return $linkWrap;
			}
		}
		return '';
	}
	
	function renderBlogrollItem($row) {
		$confWidget = $this->conf['widgets.']['blogroll.'];
		$content = '';
		$this->temp_cObj = t3lib_div::makeInstance('tslib_cObj');
		$this->temp_cObj->data = $row;
		$this->temp_cObj->data['foaf'] = $this->buildRelAttr($row);
		$content = $this->temp_cObj->cObjGetSingle($confWidget['renderBlogrollItem'], $confWidget['renderBlogrollItem.']);
		return $content;
	}
	
	function renderBlogrollList() {
		$confWidget = $this->conf['widgets.']['blogroll.'];
		$content = '';
		
		$checkPid = $this->getPidList($confWidget['pidList']);
		
			
		$res = $GLOBALS['TYPO3_DB']->exec_SELECTquery(
			'*',
			'tx_timtab_blogroll',
			'1=1'.$this->enableFields.$checkPid,
			'',
			'sorting'
		);
		$count = 0;
		$renderBlogrollItem = '';
		while($row = $GLOBALS['TYPO3_DB']->sql_fetch_assoc($res)) {
			$renderBlogrollItem .= $this->renderBlogrollItem($row);
			$count++;
		}
		
		$this->temp_cObj = t3lib_div::makeInstance('tslib_cObj');
		$this->temp_cObj->data = array();
		$this->temp_cObj->data['renderBlogrollItem'] = $renderBlogrollItem;
		$this->temp_cObj->data['count'] = $count;
		$content = $this->temp_cObj->cObjGetSingle($confWidget['renderBlogrollList'], $confWidget['renderBlogrollList.']);
		return $content;
	}
	

	/**
	 * initializes the configuration for this plugin
	 *
	 * @param	array		configuration array
	 * @return	[type]		...
	 */
	function init($conf) {
		$this->conf = $conf;
		$this->pi_setPiVarDefaults();
		$this->pi_loadLL();
		$this->enableFields = $this->cObj->enableFields('tx_timtab_blogroll');
		$this->temp_cObj  = t3lib_div::makeInstance('tslib_cObj');

	}

	/**
	 * builds the rel attribute for the anchor
	 *
	 * @author Ingo Renner
	 * @param	array		data row of the current link
	 * @return	string		the rel attribute
	 */
	function buildRelAttr($row) {
		$rel = array();

		if($row['rel_identity'] == 1) {
			return ' rel="me"';
		}

		switch($row['rel_friendship']) {
			case 1:
				$rel[] = 'acquaintance';
				break;
			case 2:
				$rel[] = 'contact';
				break;
			case 3:
				$rel[] = 'friend';
				break;
		}

		if($row['rel_physical'] == 1) {
			$rel[] = 'met';
		}

		//bitmask!
		switch($row['rel_professional']) {
			case 1:
				$rel[] = 'co-worker';
				break;
			case 2:
				$rel[] = 'colleague';
				break;
			case 3: //1 + 2 = 3
				$rel[] = 'co-worker colleague';
				break;
		}

		switch($row['rel_geographical']) {
			case 1:
				$rel[] = 'co-resident';
				break;
			case 2:
				$rel[] = 'neighbor';
				break;
		}

		switch($row['rel_family']) {
			case 1:
				$rel[] = 'child';
				break;
			case 2:
				$rel[] = 'kin';
				break;
			case 3:
				$rel[] = 'parent';
				break;
			case 4:
				$rel[] = 'sibling';
				break;
			case 5:
				$rel[] = 'spouse';
				break;
		}

		//until here we can have a maximum of 6 relationship attributes
		//romantic is a bitmask: 1 2 4 8
		$bitmask = $row['rel_romantic'];
		if(($bitmask - 8) >= 0 ) {
			$rel[9] = 'sweetheart'; //9 is the maximum key of relationship attributes
			$bitmask -= 8;
		}
		if(($bitmask - 4) >= 0 ) {
			$rel[8] = 'date';
			$bitmask -= 4;
		}
		if(($bitmask - 2) >= 0 ) {
			$rel[7] = 'crush';
			$bitmask -= 2;
		}
		if(($bitmask - 1) >= 0 ) {
			$rel[6] = 'muse';
			$bitmask -= 1;
		}

		ksort($rel);

		//put everything together
		if(count($rel)) {
			$relAttr = ' rel="'.implode(' ', $rel).'"';
		} else {
			$relAttr = '';
		}

		return $relAttr;
	}
}



if (defined('TYPO3_MODE') && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/timtab/pi1/class.tx_timtab_pi1.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/timtab/pi1/class.tx_timtab_pi1.php']);
}

?>